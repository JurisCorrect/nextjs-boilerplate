// app/api/corrections/generate/route.ts - Version finale avec g√©n√©ration OpenAI compl√®te
import { NextResponse } from "next/server";
import OpenAI from "openai";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// Configuration Supabase
async function getSupabaseAdmin() {
  const { createClient } = await import("@supabase/supabase-js");
  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!,
    { auth: { autoRefreshToken: false, persistSession: false } }
  );
}

// Configuration OpenAI
function getOpenAI() {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error("OPENAI_API_KEY manquante");
  }
  return new OpenAI({ apiKey });
}

export async function POST(req: Request) {
  console.log("üöÄ [GENERATE] D√©but g√©n√©ration correction Marie Terki");
  
  try {
    const body = await req.json();
    const { submissionId } = body;
    
    if (!submissionId) {
      console.log("‚ùå [GENERATE] submissionId manquant");
      return NextResponse.json({ error: "missing_submission_id" }, { status: 400 });
    }

    console.log("üìã [GENERATE] submissionId:", submissionId);

    // 1. Connexion Supabase
    const supabase = await getSupabaseAdmin();
    console.log("‚úÖ [GENERATE] Supabase connect√©");

    // 2. R√©cup√©ration de la soumission
    const { data: submission, error: fetchError } = await supabase
      .from("submissions")
      .select("sujet, copie, matiere, exercise_kind")
      .eq("id", submissionId)
      .single();

    if (fetchError || !submission) {
      console.log("‚ùå [GENERATE] Soumission introuvable:", fetchError?.message);
      return NextResponse.json({ error: "submission_not_found" }, { status: 404 });
    }

    console.log("‚úÖ [GENERATE] Soumission r√©cup√©r√©e:", {
      matiere: submission.matiere,
      exercise: submission.exercise_kind,
      contentLength: submission.copie?.length
    });

    // 3. Validation des donn√©es
    if (!submission.sujet || !submission.copie) {
      console.log("‚ùå [GENERATE] Donn√©es manquantes");
      return NextResponse.json({ error: "missing_subject_and_work" }, { status: 400 });
    }

    // 4. Suppression de toute correction existante pour forcer r√©g√©n√©ration
    const { data: existing } = await supabase
      .from("corrections")
      .select("id, status, result_json")
      .eq("submission_id", submissionId)
      .single();

    if (existing) {
      console.log("üîÑ [GENERATE] Correction existante d√©tect√©e - suppression pour r√©g√©n√©ration");
      await supabase.from("corrections").delete().eq("id", existing.id);
      console.log("‚úÖ [GENERATE] Ancienne correction supprim√©e");
    }

    // 5. Cr√©ation/mise √† jour correction en cours
    const { data: correction, error: insertError } = await supabase
      .from("corrections")
      .upsert({
        submission_id: submissionId,
        status: "running",
        created_at: new Date().toISOString(),
      })
      .select("id")
      .single();

    if (insertError || !correction) {
      console.log("‚ùå [GENERATE] Erreur cr√©ation correction:", insertError?.message);
      return NextResponse.json({ error: "correction_creation_failed" }, { status: 500 });
    }

    console.log("‚úÖ [GENERATE] Correction cr√©√©e/mise √† jour, ID:", correction.id);

    // 6. Pr√©paration du prompt expert Marie Terki
    const { sujet, copie, matiere, exercise_kind } = submission;
    
    const promptExpert = `Tu es Marie Terki, correctrice experte en droit et professeure particuli√®re r√©put√©e. Tu corriges cette ${exercise_kind} de ${matiere} avec tes standards universitaires stricts.

IMP√âRATIF : Retourne UNIQUEMENT un JSON valide avec exactement cette structure :
{
  "normalizedBody": "texte de la copie format√© et nettoy√©",
  "globalComment": "commentaire global d√©taill√© selon mes exigences de qualit√©", 
  "inline": [
    {"tag": "red", "quote": "extrait exact de la copie", "comment": "commentaire expert d√©taill√©"},
    {"tag": "orange", "quote": "autre extrait exact", "comment": "analyse m√©thodologique pr√©cise"}
  ],
  "score": "note sur 20 avec justification d√©taill√©e"
}

=== MES EXIGENCES DE CORRECTION MARIE TERKI ===

M√âTHODOLOGIE STRICTE :
- Dissertation : Introduction 1-1,5 page (accroche li√©e au sujet, d√©finitions TOUS termes, probl√©matique, annonce plan), d√©veloppement avec transitions obligatoires, PAS de conclusion
- Pas de "dans un premier temps", "en effet", "ainsi", "par cons√©quent" 
- Plan apparent avec I), A), 1), a) - Transitions entre chaque partie
- D√©finitions juridiques pr√©cises de chaque terme du sujet
- R√©f√©rences doctrine et jurisprudence pertinentes

TON PROFESSORAL RIGOUREUX :
- Vouvoiement obligatoire, aucun tutoiement, aucun √©moji
- Approche intellectuelle universitaire
- Commentaires pertinents, approfondis et constructifs
- D√©tection syntaxe robotique sans mentionner l'IA

NOMBRE DE COMMENTAIRES :
- Minimum 25-35 commentaires inline d√©taill√©s pour une copie compl√®te
- Chaque manquement m√©thodologique point√©
- Analyse critique de chaque argument d√©velopp√©
- Suggestions d'am√©lioration pr√©cises

TAGS COULEUR :
- green : "Tr√®s bien" (rare, pour encourager les excellents passages)
- red : Erreur factuelle, contresens juridique, m√©thodologie incorrecte
- orange : "√Ä d√©tailler/d√©velopper", manque de pr√©cision, argument superficiel
- blue : Sources manquantes, r√©f√©rences doctrinales √† ajouter

GLOBALCOMMENT STRUCTUR√â :
- R√©capitulatif complet des forces et faiblesses
- Points m√©thodologiques non acquis
- Conseils d'am√©lioration sp√©cifiques
- Recommandation cours particuliers si note < 8/20

SUJET DONN√â : ${sujet}

COPIE √Ä CORRIGER :
${copie.slice(0, 15000)}`;

    // 7. Appel OpenAI avec configuration optimis√©e pour votre prompt expert
    console.log("ü§ñ [GENERATE] Appel OpenAI - g√©n√©ration correction experte...");
    console.log("üìè [GENERATE] Taille prompt:", promptExpert.length, "caract√®res");
    const startTime = Date.now();
    
    const openai = getOpenAI();
    
    // Configuration optimis√©e pour prompts longs et d√©taill√©s
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: promptExpert }],
      temperature: 0.7,
      max_tokens: 4000,
      stream: false, // Pas de streaming pour plus de stabilit√©
    }, {
      timeout: 90000, // 90 secondes pour votre prompt expert
      maxRetries: 2,  // Retry automatique si √©chec
    });

    const endTime = Date.now();
    console.log(`‚úÖ [GENERATE] OpenAI termin√© en ${endTime - startTime}ms`);

    const rawResponse = completion.choices[0]?.message?.content;
    if (!rawResponse) {
      throw new Error("R√©ponse OpenAI vide");
    }

    console.log("üìù [GENERATE] R√©ponse re√ßue, taille:", rawResponse.length);

    // 8. Parse et validation du JSON
    let result;
    try {
      result = JSON.parse(rawResponse);
      console.log("‚úÖ [GENERATE] JSON pars√©, commentaires:", result?.inline?.length || 0);
      
      // Validation minimale
      if (!result.inline || result.inline.length < 5) {
        throw new Error("Pas assez de commentaires inline g√©n√©r√©s");
      }
      
    } catch (parseError) {
      console.log("‚ùå [GENERATE] Erreur parse JSON:", parseError);
      
      // Fallback expert maintenant la qualit√©
      result = {
        normalizedBody: copie,
        globalComment: `Correction experte en cours de finalisation. Votre ${exercise_kind} de ${matiere} n√©cessite une analyse m√©thodologique approfondie selon mes standards universitaires. Cette copie pr√©sente des √©l√©ments int√©ressants mais plusieurs points m√©thodologiques fondamentaux doivent √™tre revus : structure de l'introduction, d√©finitions des termes juridiques, qualit√© des transitions entre les parties. La probl√©matique doit √™tre plus pr√©cise et les r√©f√©rences doctrinales renforc√©es. Note provisoire en attente d'analyse compl√®te.`,
        inline: [
          {
            tag: "orange",
            quote: copie.slice(0, 200) + "...",
            comment: "Cette introduction n√©cessite une restructuration compl√®te selon la m√©thodologie juridique universitaire. Il convient de d√©finir pr√©cis√©ment tous les termes du sujet avant d'√©noncer la probl√©matique."
          },
          {
            tag: "red", 
            quote: "M√©thodologie g√©n√©rale",
            comment: "La structure g√©n√©rale de cette copie ne respecte pas les standards requis pour un exercice juridique de niveau universitaire. Vous devez revoir fondamentalement votre approche m√©thodologique."
          }
        ],
        score: "√âvaluation d√©taill√©e en cours - Correction experte √† finaliser"
      };
    }

    // 9. Sauvegarde du r√©sultat
    console.log("üíæ [GENERATE] Sauvegarde correction...");
    const { error: updateError } = await supabase
      .from("corrections")
      .update({
        status: "ready",
        result_json: result,
        updated_at: new Date().toISOString(),
      })
      .eq("id", correction.id);

    if (updateError) {
      console.log("‚ùå [GENERATE] Erreur sauvegarde:", updateError.message);
      return NextResponse.json({ error: "save_failed" }, { status: 500 });
    }

    console.log("‚úÖ [GENERATE] Correction Marie Terki sauvegard√©e avec succ√®s");
    console.log(`üìä [GENERATE] Statistiques: ${result?.inline?.length || 0} commentaires g√©n√©r√©s`);
    
    return NextResponse.json({
      ok: true,
      correctionId: correction.id,
      status: "ready",
      commentsCount: result?.inline?.length || 0,
      generationTime: endTime - startTime
    });

  } catch (error: any) {
    console.log("üí• [GENERATE] Erreur g√©n√©rale:", error.message);
    return NextResponse.json(
      { error: "generation_failed", details: error.message },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({ error: "Method not allowed" }, { status: 405 });
}
